[include fluidd.cfg]
[include fly-sb2040.cfg]
[include nevermore.cfg]

[virtual_sdcard]
path: /home/adam/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
canbus_uuid: d5e7f86ae5ab

[mcu PITB]
canbus_uuid: 261931fc8408

[mcu SB2040]
canbus_uuid: 2511c78bb626 # 250b9e2b5694

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000             #Max 4000 -> Input shaper -> 8200 on X, 5200 on Y
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   Power Settings
#####################################################################

[output_pin PS_ON_OFF]
pin: PE11
value: 1

[output_pin PS_RESET]
pin: PD15
value: 0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

[stepper_x]
##	Connected to MOT1 (B Motor)
step_pin: PITB:gpio8
dir_pin: PITB:gpio7
enable_pin: !PITB:gpio5
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200  #set to 400 for 0.9 degree stepper
endstop_pin: ^PITB:gpio23
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (5160)
[tmc5160 stepper_x]
## Soft SPI
spi_software_sclk_pin: PITB:gpio2
spi_software_mosi_pin: PITB:gpio3
spi_software_miso_pin: PITB:gpio0
cs_pin: PITB:gpio6
interpolate: True
diag1_pin: PITB:gpio23
hold_current: 0.500
run_current: 0.800 
##stealthchop_threshold: 0

[stepper_y]
##	Connected to MOT2 (A Motor)
step_pin: PITB:gpio12
dir_pin: !PITB:gpio11
enable_pin: !PITB:gpio9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: ^PITB:gpio24
position_min: 0
position_endstop: 305
position_max: 305
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (5160)
[tmc5160 stepper_y] 
## Soft SPI
spi_software_sclk_pin: PITB:gpio2
spi_software_mosi_pin: PITB:gpio3
spi_software_miso_pin: PITB:gpio0
cs_pin: PITB:gpio10
diag1_pin: PITB:^gpio24
interpolate: True 
run_current: 0.8
hold_current: 0.5
##stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
# position_endstop: -0.5
position_max: 260
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

# ##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

# ##  Z1 Stepper - Rear Left
# ##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

# ##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

# ##  Z2 Stepper - Rear Right
# ##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

# ##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

# ##  Z3 Stepper - Front Right
# ##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

# ##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Input Shaper
#####################################################################

[input_shaper]
shaper_freq_x: 52.8
shaper_type_x: mzv
shaper_freq_y: 42.0
shaper_type_y: mzv

#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: SB2040:EXT_STEP
dir_pin: !SB2040:EXT_DIR
enable_pin: !SB2040:EXT_EN
rotation_distance: 22.7923458555 #22.6789511
gear_ratio: 50:10
microsteps: 16
full_steps_per_rotation: 200
max_extrude_only_distance: 1000.0
max_extrude_only_velocity: 60.0
max_extrude_only_accel: 1500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: SB2040:HE0
sensor_pin: SB2040:TH0
sensor_type: SliceEngineering 450  # this is the default for the Revo heater
#pullup_resistor: 2200             # Uncomment for PT100 Sensor with jumper installed. 
# control = pid
# pid_kp = 20.914
# pid_ki = 1.064
# pid_kd = 102.741
min_temp: -50
max_temp: 350
min_extrude_temp: 150
step_pulse_duration: 0.000004     

[tmc2209 extruder]
uart_pin: SB2040:EXT_UART
stealthchop_threshold: 0
run_current: 0.30

#####################################################################
#   Temperaure
#####################################################################
[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: -50
max_temp: 120

[temperature_sensor Octopus-Pro]
sensor_type: temperature_mcu
min_temp: -50
max_temp: 120

[temperature_sensor PITB]
sensor_type: temperature_mcu
sensor_mcu: PITB
min_temp: -50
max_temp: 120

[temperature_sensor FLY-SB2040]
sensor_type: temperature_mcu
sensor_mcu: SB2040
min_temp: -50
max_temp: 120

[temperature_sensor FLY-SB2040-2] 
sensor_type: ATC Semitec 104GT-2
sensor_pin = SB2040:gpio26        # 信号接口
min_temp: -50                     # 最小温度（注意：测量温度超过设定值会触发紧急停止）
max_temp: 120                    # 最大温度（注意：测量温度超过设定值会触发紧急停止）

[temperature_sensor Gantry]
sensor_type: Generic 3950
sensor_pin: PITB:gpio26
min_temp: -50
max_temp: 100
gcode_id: C

[temperature_sensor Enclosure]
sensor_type: Generic 3950
sensor_pin: PF4
min_temp: -50
max_temp: 100

#####################################################################
#   Probe
#####################################################################

##  Inductive Probe
##  This probe is not used for Z height, only Quad Gantry Leveling
[probe]
pin: SB2040:gpio28
x_offset: 0
y_offset: 25.0
#z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode: 
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
# ##  XY Location of the Z Endstop Switch
# ##  Update -10,-10 to the XY coordinates of your endstop pin 
# ##  (such as 157,305) after going through Z Endstop Pin
# ##  Location Definition step.
home_xy_position:150,150
speed:100
z_hop:10

# ##  Use QUAD_GANTRY_LEVEL to level a gantry.
# ##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
# ##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
# ##  to respective belt positions
[quad_gantry_level]
gantry_corners:
   -60,-10
   360,370
##  Probe points
points:
   50,25
   50,225
   250,225
   250,25
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

[bed_mesh]
speed: 300
horizontal_move_z: 10

mesh_min: 40, 40
mesh_max: 260,260

fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic

#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
# Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
#heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust Max Power so your heater doesn't warp your bed. Rule of thumb is 0.4 watts / cm^2 .
#max_power: 0.6
min_temp: 0
max_temp: 120
# control: pid
# pid_kp = 61.019
# pid_ki = 1.956
# pid_kd = 475.951

#####################################################################
#                       adxl345
#####################################################################
## ADXL345
[adxl345]
cs_pin: SB2040:ADXL
spi_software_sclk_pin: SB2040:gpio0
spi_software_mosi_pin: SB2040:gpio3
spi_software_miso_pin: SB2040:gpio2

[resonance_tester]
accel_chip:adxl345
accel_per_hz: 50  # default is 75
probe_points:
    150,150,20

#####################################################################
#   Fan Control
#####################################################################

# ##  Exhaust fan - FAN1
[controller_fan controller_fan]
pin: PE5
max_power: 1.0
kick_start_time: 0.5
fan_speed: 0.5
# heater: extruder
# heater_temp: 50.0
# ##  If you are experiencing back flow, you can reduce fan_speed
# #fan_speed: 1.0

# ##  Exhaust fan - FAN2
[controller_fan controller_fan]
pin: PD12
max_power: 1.0
kick_start_time: 0.5
fan_speed: 0.5
heater: heater_bed

##  Exhaust fan - FAN3
[heater_fan exhaust_fan]
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0

[heater_fan hotend_fan]
pin: SB2040:FAN1
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0

[fan]
pin: SB2040:FAN0
kick_start_time: 0.25
cycle_time: 0.15
off_below: 0.10

#####################################################################
#   LED Control
#####################################################################


## Chamber Lighting - HE2 Connector (Optional)
[output_pin caselight]
pin: PB11
pwm:true
shutdown_value: 0
value:1
cycle_time: 0.01

[neopixel case_led]
pin: PB0
chain_count: 18
color_order: GRB
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0

[neopixel SB2040_led]
pin: SB2040:RGBLED
chain_count: 3
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "SB2040_led" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "SB2040_led"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle

variable_thermal_config: {
        'extruder': {
            'cool_temp': 40,
            'leds': 'logo',
        },
        'heater_bed': {
            'cool_temp': 40,
            'leds': 'nozzle',
        },
    }
# temperatures at which cooling will be considered complete

gcode:
    ; Do nothing

[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}
    
    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

##  mini12864 LCD Display
[display]
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

##  To control Neopixel RGB in mini12864 display
[neopixel btt_mini12864]
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

# You will need to configure a neopixel (or other addressable led, such as dotstar). See
# https://www.klipper3d.org/Config_Reference.html#neopixel for configuration details.
# And you can get sb led MACRO here: https://github.com/PrinterConfigs/DoomConfig/blob/master/stealthburner.cfg
# Or here https://github.com/sttts/voron-klipper-config/blob/master/stealthburner_leds.cfg
# [neopixel leds]
# pin: PITB:gpio29
# chain_count: 3
# color_order: GRBW
# initial_RED: 0.5
# initial_GREEN: 0.5
# initial_BLUE: 0.5
# initial_WHITE: 0.5

# [fan_generic fg1]
# pin: PITB:gpio20

# [fan_generic fg2]
# pin: PITB:gpio21

# [temperature_sensor chamber]
# sensor_type: Generic 3950
# sensor_pin: PITB:gpio26
# min_temp: 0
# max_temp: 100
# gcode_id: C

[output_pin activity_led]
pin: PITB:gpio15

#####################################################################
#   Macros
#####################################################################

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 61.019
#*# pid_ki = 1.956
#*# pid_kd = 475.951
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 20.914
#*# pid_ki = 1.064
#*# pid_kd = 102.741
#*#
#*# [probe]
#*# z_offset = -0.356
